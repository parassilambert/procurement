<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

namespace AppBundle\Entity;

/**
 * Description of AdminUser
 *
 * @author lambert
 */
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * @ORM\Table(name="adminuser")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\AdminUserRepository")
 * @ORM\HasLifecycleCallBacks()
 */
class AdminUser implements UserInterface,  \Serializable{
    
    /**
     * @ORM\Column(type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;
    
    /**
     * @ORM\Column(type="string",length=25,unique=true)
     */
    protected $username;
    
    /**
     * @ORM\Column(type="string",length=64)
     */
    protected $password;
    
    /**
     * @ORM\Column(type="string",length=25)
     */    
    protected $firstname;
    
    /**
     * @ORM\Column(type="string",length=25)
     */    
    protected $lastname;
    
    /**
     * @ORM\Column(type="string",length=60,unique=true)
     */
    protected $email;
    
    /**
     * @ORM\Column(name="is_active",type="boolean")
     */
    protected $isActive;
    
    /**
     * @ORM\Column(name="created_at",type="datetime")
     */
    protected $createdAt;
    
     public function __construct() {
        $this->isActive = true;
    }

    public function eraseCredentials() {
        
    }

    public function getPassword() {
        return $this->password;
    }

    public function getRoles() {
        return array("ROLE_ADMIN");
    }

    public function getSalt() {
        return null;
    }

    public function getUsername() {
        return $this->username;
    }
    
    /**
     * @see \Serializable::serialize()
     */

    public function serialize() {
        return serialize(array($this->id,$this->username,$this->password));
    }
    
    /**
     * @see \Serializable::unserialize()
     */

    public function unserialize($serialized) {
        list($this->id,$this->username,$this->password) = unserialize($serialized);
    }
    
    /**
     * @ORM\PrePersist
     */
    public function setCreatedAtValue() {
        $this->createdAt = new \DateTime();
    }

}
